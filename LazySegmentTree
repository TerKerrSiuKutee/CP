template<
    class T
> struct SegmentTree
{
    int n;
    vector<T> st, lz;

    SegmentTree(int _n = 0)
    {
        n = _n;
        st.assign((_n << 2) + 9, 0);
        lz.assign((_n << 2) + 9, 0);
    }

    void pushdown(int id, int l, int r)
    {
        T tmp = lz[id];
        int x = id << 1, y = x | 1;
        int mid = (l + r) >> 1;
        st[x] += tmp * (mid - l + 1); lz[x] += tmp;
        st[y] += tmp * (r - mid) ; lz[y] += tmp;
        lz[id] = 0;
    }

    void update(const int &id, const int &l, const int &r, const int &u, const int &v, const T &val)
    {
        if (l > v || r < u) return;
        if (l >= u && r <= v) {
            st[id] += val * (r - l + 1);
            lz[id] += val; 
            return;
        }
        pushdown(id, l, r);
        int mid = (l + r) >> 1;
        update(id << 1, l, mid, u, v, val);
        update(id << 1 | 1, mid + 1, r, u, v, val);
        st[id] = st[id << 1] + st[id << 1 | 1];
    }

    T get(const int &id, const int &l, const int &r, const int &u, const int &v)
    {
        if (v < l || u > r) return 0;
        if (l >= u && r <= v) return st[id];
        pushdown(id, l, r);
        int mid = (l + r) >> 1;
        return get(id << 1, l, mid, u, v) + get(id << 1 | 1, mid + 1, r, u, v);
    }

    void update(const int &l, const int &r, const int &val)
    {
        update(1, 1, n, l, r, val);
    }

    T get(const int &l, const int &r)
    {
        return get(1, 1, n, l, r);
    }
};
